version: "3.8"

services:
  watchtower:
    image: containrrr/watchtower
    command:
      - "--label-enable"
      - "--interval"
      - "30"
      - "--rolling-restart"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app-network

  traefik:
    image: traefik:v3.0
    command:
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      # - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - app-network

  db:
    image: postgres:14-alpine
    container_name: klark_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-network

  app:
    image: ghcr.io/rajnykdhulapkar/klark:main
    # container_name: klark_app
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`klark.bitnaysh.com`)"
      - "traefik.http.routers.app.entrypoints=web"
      - "traefik.http.services.app.loadbalancer.server.port=3000"
      - "com.centurylinklabs.watchtower.enable=true"
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      RESEND_API_KEY: ${RESEND_API_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      OPEN_AI_MODEL: ${OPEN_AI_MODEL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_VERBOSE: ${OPENAI_VERBOSE}
      LAST_K_CHAT_HISTORY: ${LAST_K_CHAT_HISTORY}
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
      NEXT_PUBLIC_POSTHOG_KEY: ${NEXT_PUBLIC_POSTHOG_KEY}
      NEXT_PUBLIC_POSTHOG_HOST: ${NEXT_PUBLIC_POSTHOG_HOST}
      NODE_ENV: production
    # deploy:
    #   mode: replicated
    #   replicas: 2
    depends_on:
      - db
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db_data:
